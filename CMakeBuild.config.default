# Configuration options, used by build systems and scripts.

# The name that is advertised.
# Should be 10 characters or less (we need room for compilation date after it)
BLUETOOTH_NAME="crown"

FIRMWARE_VERSION="0.4.0"

# The device type defines how the device advertises itself, Apps and Bluenet Library
# will use this to filter for device type.
# It is also used to enable/disable device type specific functionality.
# e.g. power related functionality (switch, power sampling, etc) is only
# available for device type crownstone.
# DEVICE_UNDEF       0
# DEVICE_CROWNSTONE  1
# DEVICE_GUIDESTONE  2
# DEVICE_FRIDGE      3
DEVICE_TYPE=DEVICE_CROWNSTONE

# To avoid confusion when trying to enable functionality through compiler flags, the
# persistent storage for flags is disabled by default, set to 0 if enabling disabling functionality through
# the characteristics / command should be persistently stored!
PERSISTENT_FLAGS_DISABLED=1

# Enable or disable meshing (1 or 0)
MESHING=1

# Build as iBeacon (Crownstone will advertise itself as iBeacon)
IBEACON=1

# Set if crownstone should set power on by default when turning on
DEFAULT_ON=1

# Sample continuously at a low sample rate (100Hz by default).
# Disables burst sampling.
CONTINUOUS_POWER_SAMPLER=0

# Enable or disable interval scanner, will scann every
# SCAN_SEND_DELAY + SCAN_BRAK_DURATION ms, for SCAN_DURATION ms
# waits for SCAN_SEND_DELAY ms after scan end before sending result
# into mesh (if MESHING enabled)
INTERVAL_SCANNER_ENABLED=1

# Options to save energy
LOW_POWER_MODE=0
PWM_ENABLE=1

# define the iBeacon advertisement package parameters
# the proximity UUID.
# only applies if IBEACON==1 or DEVICE_TYPE==DEVICE_DOBEACON
BEACON_UUID="a643423e-e175-4af0-a2e4-31e32f729a8a"
# the major number
BEACON_MAJOR=0
# the minor number
BEACON_MINOR=0
# the rssi
BEACON_RSSI=0xC4

# Set to 1 to enable encryption of BLE Link (reading and writing to characteristics
# needs bonding first)
ENCRYPTION=0
# the default passkey used for bonding. can be changed with configuration charac
STATIC_PASSKEY="123456"

# Enable or disable different services (at times required to preserve memory)
CROWNSTONE_SERVICE=1
INDOOR_SERVICE=1
GENERAL_SERVICE=1
POWER_SERVICE=1
SCHEDULE_SERVICE=0

# Enable or disable characteristics
# Crownstone Service
CHAR_CONTROL=1
CHAR_MESHING=1
CHAR_CONFIGURATION=1
CHAR_STATE=1

## General Service
CHAR_TEMPERATURE=1
CHAR_RESET=1

## Power Service
CHAR_PWM=1
CHAR_RELAY=1
CHAR_SAMPLE_CURRENT=1
CHAR_CURRENT_LIMIT=1

## Indoor Localization Service
CHAR_RSSI=1
CHAR_SCAN_DEVICES=1
CHAR_TRACK_DEVICES=1

## Schedule Service
CHAR_SCHEDULE=1

# Size of the master buffer
# Currently this should not be larger than BLE_GATTS_VAR_ATTR_LEN_MAX (512)
MASTER_BUFFER_SIZE=300

# set default operation mode at first start, for release, this will need to be
# set to OPERATION_MODE_SETUP so that it first starts into setup mode, but as long ase
# we are developing, leave it on normal mode
DEFAULT_OPERATION_MODE=OPERATION_MODE_NORMAL

# Verbosity of the UART
# DEBUG     0
# INFO      1
# WARNING   2
# ERROR     3
# FATAL     4
# NONE      5
SERIAL_VERBOSITY=INFO

# The different boards that can be used:
# PCA10001             0
# NRF6310              1
# NRF51822_DONGLE      2
# NRF51822_EVKIT       3
# RFDUINO              4
# CROWNSTONE           5
# NRF51422             6
# VIRTUALMEMO          7
# CROWNSTONE2          8
# CROWNSTONE_SENSOR    9
# PCA10000/PCA10031    10
# CROWNSTONE3          11
# CROWNSTONE4          12
# NORDIC_BEACON        13
# DOBEACON             14
# CROWNSTONE5          15
# DOBEACON2            16
HARDWARE_BOARD=CROWNSTONE4

# Default transmission power
# Can be: -40, -30, -20, -16, -12, -8, -4, 0, or 4
TX_POWER=4

# Default advertisement interval, in units of 0.625 ms
# Must be between 32 and 16384
# When meshing: must be >= timeslot period used by rbc_mesh (atm 100ms)
ADVERTISEMENT_INTERVAL=160

# Minimal and maximal environment temperatures in degrees celsius
MIN_ENV_TEMP=2
MAX_ENV_TEMP=10

# Maximal chip temperature in degrees celsius
MAX_CHIP_TEMP=80

# Time (ms) to wait with during booting
BOOT_DELAY=3000

# Durations for the scanner in ms
SCAN_DURATION=2000
SCAN_SEND_DELAY=1000
SCAN_BREAK_DURATION=7000

# Default scan filter (do not report these devices in scan result)
# Using a bit mask, set corresponding bits to 1 to filter device OUT
# CROWNSTONE    0
# DOBEACON 		1
# E.g. to filter crownstones and dobeacons: 1 << 0 | 1 << 1 = 3
SCAN_FILTER=3

# Filtered out devices are still sent once every N scan intervals
# Set to 0 to not send them ever
SCAN_FILTER_SEND_FRACTION=360

# Some config introduced by anne
RSSI_ENABLE=1

# This is used to prevent the bootloader to overwrite pstorage during DFU, so it has to be adjusted to the
# size used by pstorage. Currently we have set it to 3 * CODE_PAGE_SIZE + 1 * CODE_PAGE_SIZE, with the latter
# being the swap area
# (http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk52.v0.9.0%2Flib_pstorage.html)
# Has to be a multiple of page size (0x0400)
APP_DATA_RESERVED=0x1000

# Version of the nrf51 chip, use script/hardware_version.sh to check your version
HARDWARE_VERSION=0x001D

# This is the directory where the cross-compiler resides
COMPILER_PATH=

# The compiler type
COMPILER_TYPE=arm-none-eabi

# The JLink utility (when using the Segger to flash the nRF)
JLINK=/usr/bin/JLinkExe

# The JLink utilty that can be used with gdb
JLINK_GDB_SERVER=/usr/bin/JLinkGDBServer

# Use SoftDevice (setting to 0 is untested)
# [18.07.16] do we really want this flag still? Most of our code depends on the
# softdevice being present. disabling this flag won't work without major code changes!!
NRF51_USE_SOFTDEVICE=1

# the directory with /Source and /Include subdirectories from the Nordic SDK
NRF51822_DIR=
# the nordic sdk version
NORDIC_SDK_VERSION=8

# starting with SoftDevice S110 v7 there is no separate UICR section
SOFTDEVICE_NO_SEPARATE_UICR_SECTION=1

BOOTLOADER_START_ADDRESS=0x00038000
# 0x00040000 - BOOTLOADER_START_ADDRESS = 32k
BOOTLOADER_LENGTH=32k

# The directory where the softdevice can be found
# change if you want to use a different softdevice than the ones provided in the SDK
# leave undefined for default
# SOFTDEVICE_DIR=
# The name of the directory where the include files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_API=
# The name of the directory where the hex files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_HEX=

# SOFTDEVICE                           - the name of the SoftDevice (without _softdevice.hex)
# SOFTDEVICE_SERIES                    - the series of the SoftDevice (s110 vs s130 e.g.), used in the code
#
# For the following examples, suppose the SoftDevice takes 80kB and the application 176kB
# APPLICATION_START_ADDRESS            - 80kB corresponds with 0x00014000 hex
# Check https://devzone.nordicsemi.com/question/15994/nrf51822-iram-and-irom-settings-for-v05-s130-sd/
# APPLICATION_LENGTH                   - 176kB corresponds with 0x2c000 hex, should be 0x40000 - 0x14000
# RAM_R1_BASE                          - starting point for softdevice in RAM
# RAM_APPLICATION_AMOUNT               - size of softdevice in RAM

#######################################################################################################################
# For the S110 SoftDevice version (v8)
# SoftDevice takes 88kB and application 168kB
#######################################################################################################################
#SOFTDEVICE_MAJOR=8
#SOFTDEVICE_MINOR=0
#SOFTDEVICE_SERIES=110
#SOFTDEVICE=s110
#APPLICATION_START_ADDRESS=0x00018000
#APPLICATION_LENGTH=0x28000
#RAM_R1_BASE=0x20002000
## RAM_APPLICATION_AMOUNT=8K
## HEAP_SIZE=2700
## For the 32kB chip:
#RAM_APPLICATION_AMOUNT=24K
#HEAP_SIZE=16700

# ## to enable all services the gatt attribute table size has to be increased, and in turn, the RAM_R1_BASE and
# ## RAM_APPLICATION_AMOUNT variables have to be adjusted. Default for the ATTR_TABLE_SIZE is 0x600, so if you
# ## increase the ATTR_TABLE_SIZE, the RAM_R1_BASE has to be increased by the same value and the RAM_APPLICATION_AMOUNT
# ## has to be decreased by the same value (and most likely the HEAP_SIZE as well), e.g.
# # ATTR_TABLE_SIZE=0x900
# # RAM_R1_BASE=0x20002300
# # RAM_APPLICATION_AMOUNT=0x5D00
# ATTR_TABLE_SIZE=0x600

#######################################################################################################################
# For the S130 SoftDevice version (v1.0)
# SoftDevice (from inspection seems to be 110kB) and application 168kB
# bonus, vim shorthand
#   :echo printf("%x", 110*1024)
# checking S130 SoftDevice Specification, space for it should be 128kB
# Wrong... It was right in the beginning. It is at 0x0001c000 just after the softdevice
# The spec is also wrong, about the amount of RAM, it is 0x1800 (6kB), not 10kB
#######################################################################################################################
SOFTDEVICE_MAJOR=1
SOFTDEVICE_MINOR=0
SOFTDEVICE_SERIES=130
SOFTDEVICE=s130
APPLICATION_START_ADDRESS=0x0001c000
APPLICATION_LENGTH=0x23000
#RAM_R1_BASE=0x20002800
#RAM_APPLICATION_AMOUNT=0x1800
#HEAP_SIZE=2700;
# For the 32kB chip:
#RAM_APPLICATION_AMOUNT=0x5800
#HEAP_SIZE=5000;

## to enable all services the gatt attribute table size has to be increased, and in turn, the RAM_R1_BASE and
## RAM_APPLICATION_AMOUNT variables have to be adjusted. Default for the ATTR_TABLE_SIZE is 0x600, so if you
## increase the ATTR_TABLE_SIZE, the RAM_R1_BASE has to be increased by the same value and the RAM_APPLICATION_AMOUNT
## has to be decreased by the same value (and most likely the HEAP_SIZE as well), e.g.
ATTR_TABLE_SIZE=0xA00
RAM_R1_BASE=0x20002C00
RAM_APPLICATION_AMOUNT=0x5400
HEAP_SIZE=6000



