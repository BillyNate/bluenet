/*
 * Author: Crownstone Team
 * Copyright: Crownstone <https://crownstone.rocks>
 * Date: Mar 30, 2022
 * License: LGPLv3, Apache License 2.0, and/or MIT (triple-licensed)
 */

/**
 * @file cs_MemoryLayout.h
 *
 * This file gathers the full memory layout of the bootloader, firmware and other components in order
 * to allow application layer introspection.
 */
#pragma once

#include <components/libraries/bootloader/dfu/nrf_dfu_types.h>
#include <stdint.h>

enum MemoryType {
	MT_Flash = 0,
	MT_Ram   = 1,
};

struct MemorySection {
	uintptr_t _start;
	uintptr_t _end;
	uint32_t _size;
	enum MemoryType _type;
};

_Static_assert(
		BOOTLOADER_SETTINGS_ADDRESS == @CS_BOOTLOADER_SETTINGS_ADDRESS@, "Bootloader settings address mismatch");

_Static_assert(NRF_MBR_PARAMS_PAGE_ADDRESS == @CS_MBR_PARAMS_PAGE_ADDRESS@, "MBR param page address mismatch");

/**
 * The SoftDevice and the MBR come together in a Nordic SoftDevice image. Hence, this includes the MBR page.
 */
const struct MemorySection softdeviceFlashSection = {
		._start = 0x00,
		._end   = @APPLICATION_START_ADDRESS@,
		._size  = @APPLICATION_START_ADDRESS@,
		._type  = MT_Flash,
};

/**
 * The bluenet application itself.
 */
const struct MemorySection bluenetFlashSection = {
		._start = @APPLICATION_START_ADDRESS@,
		._end   = @APPLICATION_START_ADDRESS@ + @APPLICATION_LENGTH@,
		._size  = @APPLICATION_LENGTH@,
		._type  = MT_Flash,
};

/**
 * This is a part of flash that is not used by anything.
 */
const struct MemorySection freeFlashSection = {
		._start = @APPLICATION_START_ADDRESS@ + @APPLICATION_LENGTH@,
		._end   = @FLASH_MICROAPP_BASE@,
		._size  = @FLASH_MICROAPP_BASE@ - (@APPLICATION_START_ADDRESS@ + @APPLICATION_LENGTH@),
		._type  = MT_Flash,
};

/**
 * The start and end is about the entire section for all microapps. Use _size / g_MICROAPP_NUMBER to get back to the
 * individual size for a microapp.
 */
const struct MemorySection microappFlashSection = {
		._start = @FLASH_MICROAPP_BASE@,
		._end   = @FLASH_MICROAPP_BASE@ + @FLASH_MICROAPP_PAGES@ * CODE_PAGE_SIZE * @MICROAPP_NUMBER@,
		._size  = @FLASH_MICROAPP_PAGES@ * CODE_PAGE_SIZE * @MICROAPP_NUMBER@,
		._type  = MT_Flash,
};

/**
 * A single page after the microapp pages for DFU update procedures from one Crownstone to the next.
 */
const struct MemorySection p2pDfuFlashSection = {
		._start = @FLASH_MICROAPP_BASE@ + @FLASH_MICROAPP_PAGES@ * CODE_PAGE_SIZE * @MICROAPP_NUMBER@,
		._end = @FLASH_MICROAPP_BASE@ + @FLASH_MICROAPP_PAGES@ * CODE_PAGE_SIZE * @MICROAPP_NUMBER@ + CODE_PAGE_SIZE,
		._size = CODE_PAGE_SIZE,
		._type = MT_Flash,
};

/**
 * For possible FDS expansion. Nordic's FDS_VIRTUAL_PAGES_RESERVED is called CS_FDS_VIRTUAL_PAGES_RESERVED_AFTER to
 * indicate it's the pages after FDS and before the bootloader that is reserved by that. This is usually 0.
 * The CS_FDS_VIRTUAL_PAGES_RESERVED_BEFORE reserves pages before FDS for possible expansion.
 */
const struct MemorySection fdsExpansionFlashSection = {
		._start = @BOOTLOADER_START_ADDRESS@
				  - @CS_FDS_VIRTUAL_PAGES@
							* -(@CS_FDS_VIRTUAL_PAGES@ + @CS_FDS_VIRTUAL_PAGES_RESERVED_AFTER@
								+ @CS_FDS_VIRTUAL_PAGES_RESERVED_BEFORE@),
		._end = @BOOTLOADER_START_ADDRESS@
				- (@CS_FDS_VIRTUAL_PAGES_RESERVED_AFTER@ + @CS_FDS_VIRTUAL_PAGES_RESERVED_BEFORE@)
						  * @CS_FDS_VIRTUAL_PAGE_SIZE@,
		._size = @CS_FDS_VIRTUAL_PAGES_RESERVED_BEFORE@ * @CS_FDS_VIRTUAL_PAGE_SIZE@,
		._type = MT_Flash,
};

/**
 * Section for FDS that's in use.
 */
const struct MemorySection fdsFlashSection = {
		// Values should match the ones in components/libraries/fds/fds.c
		._start = @BOOTLOADER_START_ADDRESS@
				  - (@CS_FDS_VIRTUAL_PAGES@ + @CS_FDS_VIRTUAL_PAGES_RESERVED_AFTER@) * @CS_FDS_VIRTUAL_PAGE_SIZE@,
		._end  = @BOOTLOADER_START_ADDRESS@ - (@CS_FDS_VIRTUAL_PAGES_RESERVED_AFTER@ * @CS_FDS_VIRTUAL_PAGE_SIZE@),
		._size = @CS_FDS_VIRTUAL_PAGES@ * @CS_FDS_VIRTUAL_PAGE_SIZE@,
		._type = MT_Flash,
};

/**
 * The bootloader pretty much at the end of the flash. The start address is hardcoded rather than calculated because it
 * is required in the build process at a very early stage. The address has to be written in UICR for example.
 */
const struct MemorySection bootloaderFlashSection = {
		._start = @BOOTLOADER_START_ADDRESS@,
		._end   = @BOOTLOADER_START_ADDRESS@ + @BOOTLOADER_LENGTH@,
		._size  = @BOOTLOADER_LENGTH@,
		._type  = MT_Flash,
};

/**
 * The bootloader can be expanded for 1 page without the need to change its start address. Very important for easy
 * upgradeability. For now just hardcoded to this 1 page.
 */
const struct MemorySection bootloaderExpansionFlashSection = {
		._start = @BOOTLOADER_START_ADDRESS@ + @BOOTLOADER_LENGTH@,
		._end   = @BOOTLOADER_START_ADDRESS@ + @BOOTLOADER_LENGTH@ + CODE_PAGE_SIZE,
		._size  = CODE_PAGE_SIZE,
		._type  = MT_Flash,
};

/**
 * The MBR settings page, almost at the end of flash.
 */
const struct MemorySection mbrSettingsFlashSection = {
		// The size of mbr settings is at minimum one page: CODE_PAGE_SIZE
		._start = @CS_MBR_PARAMS_PAGE_ADDRESS@,
		._end   = @CS_MBR_PARAMS_PAGE_ADDRESS@ + CODE_PAGE_SIZE,
		._size  = CODE_PAGE_SIZE,
		._type  = MT_Flash,
};

/**
 * The bootloader settings page, at the end of flash.
 *
 * Compare values with components/libraries/bootloader/dfu/nrf_dfu_types.h. For instance:
 *     BOOTLOADER_SETTINGS_PAGE_SIZE = CODE_PAGE_SIZE
 */
const struct MemorySection bootloaderSettingsFlashSection = {
		// The size of bootloader settings is at minimum one page: CODE_PAGE_SIZE
		._start = @CS_BOOTLOADER_SETTINGS_ADDRESS@,
		._end   = @CS_BOOTLOADER_SETTINGS_ADDRESS@ + CODE_PAGE_SIZE,
		._size  = CODE_PAGE_SIZE,
		._type  = MT_Flash,
		// bootloader settings backup address: @BOOTLOADER_SETTINGS_BACKUP_ADDRESS@
};

/**
 * The amount of memory required for the SoftDevice. The application memory starts immediately after this.
 */
const struct MemorySection softdeviceRamSection = {
		._start = 0x00,
		._end   = @RAM_R1_BASE@,
		._size  = @RAM_R1_BASE@,
		._type  = MT_Flash,
};

/**
 * The amount of memory available to bluenet (at the end there's memory set aside for the microapps and IPC).
 */
const struct MemorySection bluenetRamSection = {
		._start = @RAM_R1_BASE@,
		._end   = @RAM_R1_BASE@ + @RAM_APPLICATION_AMOUNT@ - @RAM_BLUENET_IPC_LENGTH@
				- (@RAM_MICROAPP_AMOUNT@ * @MICROAPP_NUMBER@),
		._size = @RAM_APPLICATION_AMOUNT@ - @RAM_BLUENET_IPC_LENGTH@ - (@RAM_MICROAPP_AMOUNT@ * @MICROAPP_NUMBER@),
		._type = MT_Ram,
};

const struct MemorySection microappRamSection = {
		._start = @RAM_R1_BASE@ + @RAM_APPLICATION_AMOUNT@ - @RAM_BLUENET_IPC_LENGTH@
				  - (@RAM_MICROAPP_AMOUNT@ * @MICROAPP_NUMBER@),
		._end  = @RAM_R1_BASE@ + @RAM_APPLICATION_AMOUNT@ - @RAM_BLUENET_IPC_LENGTH@,
		._size = @RAM_MICROAPP_AMOUNT@ * @MICROAPP_NUMBER@,
		._type = MT_Ram,
};

const struct MemorySection ipcRamSection = {
		// Values should match the ones in generic_gcc_nrf52.ld
		._start = @RAM_R1_BASE@ + @RAM_APPLICATION_AMOUNT@ - @RAM_BLUENET_IPC_LENGTH@,
		._end   = @RAM_R1_BASE@ + @RAM_APPLICATION_AMOUNT@,
		._size  = @RAM_BLUENET_IPC_LENGTH@,
		._type  = MT_Ram,
};

/**
 * In bootloader mode the softdevice requires a bit more breathing room. We also preserve the IPC section in RAM so
 * that it can be used to communicate from bootloader to bluenet firmware.
 */
const struct MemorySection bootloaderRamSection = {
		// Values should match the ones in bootloader/secure_bootloader_gcc_nrf52.ld
		._start = @RAM_R1_BASE@ + @RAM_BOOTLOADER_START_OFFSET@,
		._end   = @RAM_R1_BASE@ + @RAM_APPLICATION_AMOUNT@ - @RAM_BLUENET_IPC_LENGTH@,
		._size  = @RAM_APPLICATION_AMOUNT@ - (@RAM_BOOTLOADER_START_OFFSET@ + @RAM_BLUENET_IPC_LENGTH@),
		._type  = MT_Ram,
};

