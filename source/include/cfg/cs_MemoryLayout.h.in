/*
 * Author: Crownstone Team
 * Copyright: Crownstone <https://crownstone.rocks>
 * Date: Mar 30, 2022
 * License: LGPLv3, Apache License 2.0, and/or MIT (triple-licensed)
 */

/**
 * @file cs_MemoryLayout.h
 *
 * This file gathers the full memory layout of the bootloader, firmware and other components in order
 * to allow application layer introspection.
 */
#pragma once

#include <components/libraries/bootloader/dfu/nrf_dfu_types.h>
#include <stdint.h>

enum MemoryType {
	MT_Flash = 0,
	MT_Ram   = 1,
};

struct MemorySection {
	uintptr_t _start;
	uintptr_t _end;
	uint32_t _size;
	enum MemoryType _type;
};

_Static_assert(
		BOOTLOADER_SETTINGS_ADDRESS == ${CS_BOOTLOADER_SETTINGS_ADDRESS}, "Bootloader settings address mismatch");

const struct MemorySection bootloaderFlashSection = {
		._start = ${BOOTLOADER_START_ADDRESS},
		._end   = ${BOOTLOADER_START_ADDRESS} + ${BOOTLOADER_LENGTH},
		._size  = ${BOOTLOADER_LENGTH},
		._type  = MT_Flash,
};

/**
 *
 * The size of the settings page can also be found in components/libraries/bootloader/dfu/nrf_dfu_types.h:
 *     BOOTLOADER_SETTINGS_PAGE_SIZE = CODE_PAGE_SIZE
 */
const struct MemorySection bootloaderSettingsFlashSection = {
		// The size of bootloader settings is at minimum one page: CODE_PAGE_SIZE
		._start = ${CS_BOOTLOADER_SETTINGS_ADDRESS},
		._end   = ${CS_BOOTLOADER_SETTINGS_ADDRESS} + CODE_PAGE_SIZE,
		._size  = CODE_PAGE_SIZE,
		._type  = MT_Flash,
		// bootloader settings backup address: ${BOOTLOADER_SETTINGS_BACKUP_ADDRESS}
};

const struct MemorySection bluenetFlashSection = {
		._start = ${APPLICATION_START_ADDRESS},
		._end   = ${APPLICATION_START_ADDRESS} + ${APPLICATION_LENGTH},
		._size  = ${APPLICATION_LENGTH},
		._type  = MT_Flash,
};

/**
 * The start and end is about the entire section for all microapps. Use _size / g_MICROAPP_NUMBER to get back to the
 * individual size for a microapp.
 */
const struct MemorySection microappFlashSection = {
		._start = ${FLASH_MICROAPP_BASE},
		._end   = ${FLASH_MICROAPP_BASE} + ${FLASH_MICROAPP_PAGES} * CODE_PAGE_SIZE * ${MICROAPP_NUMBER},
		._size  = ${FLASH_MICROAPP_PAGES} * CODE_PAGE_SIZE * ${MICROAPP_NUMBER},
		._type  = MT_Flash,
};

// const struct MemorySection fds {
//     ._start = 0x00,
//     ._end = 0x00,
//     ._size = 0x00,
//     ._type = MT_Flash,
// };

const struct MemorySection ipcRamSection = {
		// Values should match the ones in generic_gcc_nrf52.ld
		._start = ${RAM_R1_BASE} + ${RAM_APPLICATION_AMOUNT} - ${RAM_BLUENET_IPC_LENGTH},
		._end   = ${RAM_R1_BASE} + ${RAM_APPLICATION_AMOUNT},
		._size  = ${RAM_BLUENET_IPC_LENGTH},
		._type  = MT_Ram,
};

const struct MemorySection microappRamSection = {
		._start = ${RAM_R1_BASE} + ${RAM_APPLICATION_AMOUNT} - ${RAM_BLUENET_IPC_LENGTH}
				  - (${RAM_MICROAPP_AMOUNT} * ${MICROAPP_NUMBER}),
		._end  = ${RAM_R1_BASE} + ${RAM_APPLICATION_AMOUNT} - ${RAM_BLUENET_IPC_LENGTH},
		._size = ${RAM_MICROAPP_AMOUNT} * ${MICROAPP_NUMBER},
		._type = MT_Ram,
};

// const struct MemorySection softdevice {
//     ._start = 0x00,
//     ._end = 0x00,
//     ._size = 0x00,
//     ._type = MT_Flash,
// };

// const struct MemorySection mbr {
//     ._start = 0x00,
//     ._end = 0x00,
//     ._size = CODE_PAGE_SIZE,
//     ._type = MT_Flash,
// };

// const struct MemorySection flash {
//     ._start = 0x00,
//     ._end = 0x00,
//     ._size = 0x00,
//     ._type = MT_Flash,

//     // total: ${TOTAL_AMOUNT_FLASH}
//     // size: ${APPLICATION_START_ADDRESS}
// };

// const struct MemorySection ram {
//     ._start = ${RAM_R1_BASE},
//     ._end = 0x00,
//     ._size = ${RAM_APPLICATION_AMOUNT},
//     ._type = MT_Ram,
//     // total: ${TOTAL_AMOUNT_RAM}
// };

