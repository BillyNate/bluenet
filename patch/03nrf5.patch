diff -ruN tools/nrf5_sdk/components/ble/ble_db_discovery/ble_db_discovery.c tools/nrf5_sdk_patched/components/ble/ble_db_discovery/ble_db_discovery.c
--- tools/nrf5_sdk/components/ble/ble_db_discovery/ble_db_discovery.c	2019-02-14 17:24:58.000000000 +0100
+++ tools/nrf5_sdk_patched/components/ble/ble_db_discovery/ble_db_discovery.c	2020-12-24 16:07:41.119085461 +0100
@@ -176,6 +176,28 @@
 }
 
 
+static void discovery_available_evt_trigger(ble_db_discovery_t * p_db_discovery,
+                                            uint16_t             conn_handle)
+{
+    ble_db_discovery_evt_handler_t p_evt_handler;
+    ble_gatt_db_srv_t            * p_srv_being_discovered;
+
+    p_srv_being_discovered = &(p_db_discovery->services[p_db_discovery->curr_srv_ind]);
+
+    p_evt_handler = registered_handler_get(&(p_srv_being_discovered->srv_uuid));
+
+    if (p_evt_handler != NULL)
+    {
+        ble_db_discovery_evt_t evt =
+        {
+            .conn_handle     = conn_handle,
+            .evt_type        = BLE_DB_DISCOVERY_AVAILABLE,
+        };
+        p_evt_handler(&evt);
+    }
+}
+
+
 /**@brief     Function for triggering a Discovery Complete or Service Not Found event to the
  *            application.
  *
@@ -286,8 +308,7 @@
             // Indicate the error to the registered user application.
             discovery_error_evt_trigger(p_db_discovery, err_code, conn_handle);
 
-            m_pending_user_evts[0].evt.evt_type    = BLE_DB_DISCOVERY_AVAILABLE;
-            m_pending_user_evts[0].evt.conn_handle = conn_handle;
+            discovery_available_evt_trigger(p_db_discovery, conn_handle);
 
             return;
         }
@@ -296,8 +317,8 @@
     {
         // No more service discovery is needed.
         p_db_discovery->discovery_in_progress  = false;
-        m_pending_user_evts[0].evt.evt_type    = BLE_DB_DISCOVERY_AVAILABLE;
-        m_pending_user_evts[0].evt.conn_handle = conn_handle;
+
+        discovery_available_evt_trigger(p_db_discovery, conn_handle);
     }
 }
 
@@ -570,8 +591,7 @@
             // Indicate the error to the registered user application.
             discovery_error_evt_trigger(p_db_discovery, err_code, p_ble_gattc_evt->conn_handle);
 
-            m_pending_user_evts[0].evt.evt_type    = BLE_DB_DISCOVERY_AVAILABLE;
-            m_pending_user_evts[0].evt.conn_handle = p_ble_gattc_evt->conn_handle;
+            discovery_available_evt_trigger(p_db_discovery, p_ble_gattc_evt->conn_handle);
         }
     }
     else
@@ -673,8 +693,7 @@
 
                 discovery_error_evt_trigger(p_db_discovery, err_code, p_ble_gattc_evt->conn_handle);
 
-                m_pending_user_evts[0].evt.evt_type    = BLE_DB_DISCOVERY_AVAILABLE;
-                m_pending_user_evts[0].evt.conn_handle = p_ble_gattc_evt->conn_handle;
+                discovery_available_evt_trigger(p_db_discovery, p_ble_gattc_evt->conn_handle);
 
                 return;
             }
@@ -703,8 +722,7 @@
 
             discovery_error_evt_trigger(p_db_discovery, err_code, p_ble_gattc_evt->conn_handle);
 
-            m_pending_user_evts[0].evt.evt_type    = BLE_DB_DISCOVERY_AVAILABLE;
-            m_pending_user_evts[0].evt.conn_handle = p_ble_gattc_evt->conn_handle;
+            discovery_available_evt_trigger(p_db_discovery, p_ble_gattc_evt->conn_handle);
 
             return;
         }
@@ -816,8 +834,7 @@
             // Indicate the error to the registered user application.
             discovery_error_evt_trigger(p_db_discovery, err_code, p_ble_gattc_evt->conn_handle);
 
-            m_pending_user_evts[0].evt.evt_type    = BLE_DB_DISCOVERY_AVAILABLE;
-            m_pending_user_evts[0].evt.conn_handle = p_ble_gattc_evt->conn_handle;
+            discovery_available_evt_trigger(p_db_discovery, p_ble_gattc_evt->conn_handle);
 
             return;
         }
