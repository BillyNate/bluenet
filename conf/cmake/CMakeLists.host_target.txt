#######################################################################################################################
# The build systems uses CMake. All the automatically generated code falls under the Lesser General Public License
# (LGPL GNU v3), the Apache License, or the MIT license, your choice.
#
# Author:	 Anne C. van Rossum (Distributed Organisms B.V.)
# Date: 	 Oct 28, 2013
#
# Copyright Â© 2013 Anne C. van Rossum <anne@dobots.nl>
#######################################################################################################################

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SET(TEST_COMPILERS CXX C)

# Load compiler options from configuration file
#SET(CONFIG_FILE ${CMAKE_SOURCE_DIR}/CMakeConfig.cmake)
#MESSAGE(STATUS "Load config file ${CONFIG_FILE}")
#INCLUDE(${CONFIG_FILE})

# Set application shorthand
SET(APPLICATION_SHORTHAND "crownstone")

# Set name of project
SET(PROJECT_NAME ${APPLICATION_SHORTHAND})

# Start a project
PROJECT(${PROJECT_NAME} ${TEST_COMPILERS})

#######################################################################################################################

# CMake configuration parameters
# The second column defines the default that can be overwritten through e.g. ccmake or cmake-gui
SET(VERBOSITY                                "${VERBOSITY}"                   CACHE STRING "Verbosity in the code")
SET(HOST_TARGET                              "ON"                             CACHE BOOL "Compile for host platform")
SET(GIT_BRANCH                               "unset"                          CACHE STRING "Current git branch")
SET(GIT_HASH                                 "unset"                          CACHE STRING "Current git hash")
SET(COMPILATION_DAY                          "unset"                          CACHE STRING "Day of compilation")
SET(COMPILATION_TIME                         "unset"                          CACHE STRING "Time of day of compilation")

MESSAGE(STATUS "CMakeLists.host: Set verbosity to level: ${VERBOSITY}")
MESSAGE(STATUS "Git branch: ${GIT_BRANCH}")
MESSAGE(STATUS "Git hash: ${GIT_HASH}")
MESSAGE(STATUS "Day of compilation: ${COMPILATION_DAY}")
MESSAGE(STATUS "Time of day of compilation: ${COMPILATION_TIME}")

#######################################################################################################################

SET(DEFAULT_CXX_FLAGS        "-std=c++0x")
SET(DEFAULT_C_FLAGS          "-std=gnu99")
SET(DEFAULT_C_AND_CXX_FLAGS  "-g3 -Wall")

SET(CMAKE_CXX_FLAGS          "${CMAKE_CXX_FLAGS} ${DEFAULT_CXX_FLAGS}"                   CACHE STRING "C++ flags" FORCE)
SET(CMAKE_C_FLAGS            "${CMAKE_C_FLAGS} ${DEFAULT_C_FLAGS}"                       CACHE STRING "C flags" FORCE)
SET(CMAKE_C_AND_CXX_FLAGS    "${CMAKE_C_AND_CXX_FLAGS} ${DEFAULT_C_AND_CXX_FLAGS}"       CACHE STRING "C and C++ flags")

#######################################################################################################################

# Libraries (math, stdc++ libraries, etc.)
# Note that for a cross-compilation target it is useful to use the size-constrained *_s versions!
#SET(LIBRARY_MATH "-lm")
#SET(LIBRARY_RUNTIME "-lsupc++")

SET(LIBS "-lstdc++ ${LIBRARY_RUNTIME} ${LIBRARY_MATH} -lc")

# Some debug information
IF(VERBOSITY GREATER 4)
	MESSAGE(STATUS "Project \"${PROJECT_NAME}\" should have the following CXX flags: \"${DEFAULT_CXX_FLAGS}\"")
	MESSAGE(STATUS "Project \"${PROJECT_NAME}\" uses the following CXX flags: \"${CMAKE_CXX_FLAGS}\" (can be empty)")
	MESSAGE(STATUS "Linked libraries: ${LIBS}")
ENDIF()

# Source directory
SET(SOURCE_DIR "src")

# Refer to each header file from the "include/" root
SET(INCLUDE_DIR "include")

# Add include directories
INCLUDE_DIRECTORIES(${INCLUDE_DIR})

IF(DEFINED HOST_TARGET) 
	MESSAGE(STATUS "Run with host as compilation target")
ELSE()
	MESSAGE(FATAL_ERROR "Can only be compiled for host")
ENDIF()

ADD_DEFINITIONS("-DHOST_TARGET")

# Show which directories are actually included to the user
GET_PROPERTY(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
IF(VERBOSITY GREATER 4)
	FOREACH(dir ${dirs})
		MESSAGE(STATUS "Add to the include directories: '${dir}'")
	ENDFOREACH()
ENDIF()

MESSAGE(STATUS "Add testing files")

ENABLE_TESTING()

ADD_SUBDIRECTORY(test)

